# -*- coding: utf-8 -*-
"""Stock Price(Time Series Analysis).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bh8PryKGmrS8BucKHWCwfnf1bYFmzcl2
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

### so that u dont have warnings
from warnings import filterwarnings
filterwarnings('ignore')

path='/content/drive/MyDrive/Colab Notebooks/Files'
company_list = ['AAPL_data.csv', 'GOOG_data.csv', 'MSFT_data.csv', 'AMZN_data.csv']

#blank dataframe
all_data = pd.DataFrame()

for file in company_list:
    current_df = pd.read_csv(path+"/"+file)
    all_data = pd.concat([all_data, current_df]) #concate the data in blank dataframe
    
all_data.shape

all_data.head()

all_data.dtypes # only for checking the datatypes

all_data['date']=pd.to_datetime(all_data['date'])  # covert the datatype of date  object to date type.

all_data.dtypes

#all_data['date'][0]

#all_data.columns

# analyze the close stock

tech_list = all_data['Name'].unique()

plt.figure(figsize=(20,12))  # this is used to overcome from the problem of overlap of graph in output
for i, company in enumerate(tech_list,1):    # bydefault indexing is start with 1
    plt.subplot(2, 2, i)
    df=all_data[all_data['Name']==company]
    plt.plot(df['date'],df['close'])
    plt.title(company)

#analyze the total volume of stock being traded each day

#....
#plt.figure(figsize=(20,12))
#for i, company in enumerate(tech_list,1):
#    plt.subplot(2, 2, i)
#    df=all_data[all_data['Name']==company]
#    plt.plot(df['date'],df['volume'])
#    plt.title(company)
#.....#

import plotly.express as px

for company in (tech_list):
    df=all_data[all_data['Name']==company]
    fig = px.line(df, x="date", y="volume", title=company)
    fig.show()

# analysis daily price change in stock

import pandas as pd
df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Files/AAPL_data.csv')
df.head()

df['Daily_Price_change'] = df['close'] - df['open'] # add new column

df.head()

df['1day % return'] = ((df['close']-df['open'])/df['close'])*100  
# add new column

df.head()

# want to visualize this feature shown in df

import plotly.express as px

fig = px.line(df,x='date',y='1day % return',title=company)
fig.show()

# analyze monthly mean of close feature

df2 = df.copy()

df2.dtypes

#convert date type object to date type.
# by using pandas we can do this.

df2['date'] = pd.to_datetime(df2['date'])

df2.dtypes

df2.head()

# to convert date as a index

df2.set_index('date',inplace=True)

df2.head()

df2['2013-02-08':'2013-02-14']
# this is the benefit to change date as a index . we have fetch data with the help of range of dates.

df2['close'].resample('M').mean()
# mean of sample in respect to close column and resample the data in terms of month(M)

# also we have to plot it by using plot()
df2['close'].resample('M').mean().plot()

# now resample the data in terms of year(Y)
df2['close'].resample('Y').mean()

# i want to plot this in histogram(hist) or bar with the help of kind parameter used in plot function.
df2['close'].resample('Y').mean().plot(kind='bar')

# analyses whether stock prices of these tech companies(Amazon,Apple,Google,Microsoft) are correlated or not!!!

aapl = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Files/AAPL_data.csv')
aapl.head()

goog = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Files/GOOG_data.csv')
goog.head()

msft = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Files/MSFT_data.csv')
msft.head()

amzn = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Files/AMZN_data.csv')
amzn.head()

# define blank dataframe

close = pd.DataFrame()

close['aapl'] = aapl['close']
close['goog'] = goog['close']
close['amzn'] = amzn['close']
close['msft'] = msft['close']

close.head()

# use seaborn library
sns.pairplot(close)

# corelation(corr) plot for stock prices using heatmap
sns.heatmap(close.corr())

sns.heatmap(close.corr(),annot=True)

# analyse the daily return of each stock and how they are co-related

# blank dataframe
data = pd.DataFrame()

data['aapl_change'] = ((aapl['close']-aapl['open'])/aapl['close'])*100
data['goog_change'] = ((goog['close']-goog['open'])/goog['close'])*100
data['msft_change'] = ((msft['close']-msft['open'])/msft['close'])*100
data['amzn_change'] = ((amzn['close']-amzn['open'])/amzn['close'])*100

data.head()

sns.pairplot(data=data)

sns.heatmap(data.corr(),annot=True)

# value at risk analysis for tech companies

sns.distplot(data['aapl_change'])

# to calculate standard deviation
data['aapl_change'].std()
##    68 % of entire data

# to calculate  for 2 standard deviation 
data['aapl_change'].std()*2
##    95 % of entire data

# to calculate  for 3 standard deviation 
data['aapl_change'].std()*3
##    99.7 % of entire data

data['aapl_change'].quantile(0.1)

data.describe()

# change rows into column and vice-versa.
data.describe().T

